name: CICD Pipeline

on:
  push:
    branches: [ "main" ]
 
jobs:
  compile_and_test:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build & Unit Tests
      run: |
        mvn clean package
        mvn test

  security_checks:
    runs-on: ubuntu-latest
    needs: compile_and_test
    steps:
    - uses: actions/checkout@v4
    - name: Trivy FS Scan
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy
        trivy fs --format table -o fs-report.json .
    - name: Gitleaks Code Scan
      run: |
        sudo apt install gitleaks -y
        gitleaks detect source . -r gitleaks-report.json -f json

  sonar_scan:
    runs-on: self-hosted
    needs: security_checks
    steps:
    - uses: actions/checkout@v4
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.3.1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    - name: SonarQube Quality Gate
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  build_and_push_docker:
    runs-on: self-hosted
    needs: sonar_scan
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build Java Project
      run: mvn clean package
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build & Push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: richardaguirrecloud/bankapp:latest
        build-args: |
          JAR_FILE=target/*.jar
        no-cache: true

  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: build_and_push_docker
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: kubectl apply -f ds.yml

